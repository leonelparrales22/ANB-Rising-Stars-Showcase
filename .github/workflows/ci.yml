name: CI Pipeline with SonarQube Report

on:
  pull_request:
    branches:
      - main
      - develop
    types: [opened, synchronize, reopened]
  push:
    branches:
      - main
      - develop

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Create missing __init__.py files
        run: |
          find app app-worker shared -type d -exec touch {}/__init__.py \; || true

      - name: Set environment variables
        run: |
          echo "DATABASE_URL=sqlite:///./test.db" >> $GITHUB_ENV
          echo "SECRET_KEY=test-secret-key" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r app-worker/requirements.txt
          pip install pytest pytest-cov

      - name: Run unit tests with coverage
        run: |
          export PYTHONPATH=.:app-worker:shared
          pytest tests/ -v --cov=app --cov=app-worker --cov=shared --cov-report=xml --cov-report=html

  sonar:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Create missing __init__.py files
        run: |
          find app app-worker shared -type d -exec touch {}/__init__.py \; || true

      - name: Install dependencies for coverage
        run: |
          pip install -r requirements.txt
          pip install -r app-worker/requirements.txt
          pip install pytest pytest-cov

      - name: Generate coverage report
        run: |
          export PYTHONPATH=.:app-worker:shared
          pytest tests/ -v --cov=app --cov=app-worker --cov=shared --cov-report=xml --cov-report=html
          
          # Reparar rutas en coverage.xml
          python -c "
          import xml.etree.ElementTree as ET
          import os
          
          tree = ET.parse('coverage.xml')
          root = tree.getroot()
          
          sources_elem = root.find('sources')
          if sources_elem is not None:
              root.remove(sources_elem)
          
          new_sources = ET.SubElement(root, 'sources')
          ET.SubElement(new_sources, 'source').text = os.getcwd()
          
          for package in root.findall('.//package'):
              for cls in package.findall('.//class'):
                  filename = cls.get('filename')
                  if filename and filename.startswith('/home/runner/work/ANB-Rising-Stars-Showcase/'):
                      relative_path = filename.replace('/home/runner/work/ANB-Rising-Stars-Showcase/', '')
                      cls.set('filename', relative_path)
          
          tree.write('coverage.xml', encoding='utf-8', xml_declaration=True)
          "

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL || 'https://sonarcloud.io' }}
        with:
          args: >
            -Dsonar.projectKey=leonelparrales22_ANB-Rising-Stars-Showcase
            -Dsonar.organization=leonelparrales22
            -Dsonar.sources=app,app-worker,shared
            -Dsonar.tests=tests
            -Dsonar.python.coverage.reportPaths=coverage.xml
            -Dsonar.python.coverage.plugin=pytest
            -Dsonar.python.version=3.11
            -Dsonar.coverage.exclusions=tests/**,**/__pycache__/**,**/*.pyc,venv/**,env/**
            -Dsonar.branch.name=${{ github.ref_name }}
            -Dsonar.sourceEncoding=UTF-8

      - name: Generate SonarQube Report
        run: |
          echo "# üìä SonarQube Analysis Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          PROJECT_KEY="leonelparrales22_ANB-Rising-Stars-Showcase"
          BRANCH="${{ github.ref_name }}"
          
          # Esperar un poco para que el an√°lisis est√© disponible
          sleep 30
          
          # Obtener m√©tricas
          RESPONSE=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
            "https://sonarcloud.io/api/measures/component?component=$PROJECT_KEY&branch=$BRANCH&metricKeys=bugs,vulnerabilities,code_smells,coverage,duplicated_lines_density,alert_status,sqale_rating,reliability_rating,security_rating")
          
          # Extraer valores
          BUGS=$(echo $RESPONSE | grep -o '"bugs","value":"[^"]*' | cut -d'"' -f6 || echo "N/A")
          VULNERABILITIES=$(echo $RESPONSE | grep -o '"vulnerabilities","value":"[^"]*' | cut -d'"' -f6 || echo "N/A")
          CODE_SMELLS=$(echo $RESPONSE | grep -o '"code_smells","value":"[^"]*' | cut -d'"' -f6 || echo "N/A")
          COVERAGE=$(echo $RESPONSE | grep -o '"coverage","value":"[^"]*' | cut -d'"' -f6 || echo "N/A")
          DUPLICATION=$(echo $RESPONSE | grep -o '"duplicated_lines_density","value":"[^"]*' | cut -d'"' -f6 || echo "N/A")
          QUALITY_GATE=$(echo $RESPONSE | grep -o '"alert_status","value":"[^"]*' | cut -d'"' -f6 || echo "N/A")
          
          # Mostrar en el summary
          echo "## üêõ M√©tricas de Calidad" >> $GITHUB_STEP_SUMMARY
          echo "- **Bugs:** $BUGS" >> $GITHUB_STEP_SUMMARY
          echo "- **Vulnerabilidades:** $VULNERABILITIES" >> $GITHUB_STEP_SUMMARY
          echo "- **Code Smells:** $CODE_SMELLS" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## üß™ Cobertura de Pruebas" >> $GITHUB_STEP_SUMMARY
          echo "- **Cobertura:** $COVERAGE%" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## üìã Duplicaci√≥n de C√≥digo" >> $GITHUB_STEP_SUMMARY
          echo "- **C√≥digo Duplicado:** $DUPLICATION%" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## üö¶ Quality Gate" >> $GITHUB_STEP_SUMMARY
          if [ "$QUALITY_GATE" = "OK" ]; then
            echo "‚úÖ **APROBADO**" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **RECHAZADO**" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## üîó Enlaces" >> $GITHUB_STEP_SUMMARY
          echo "- [Ver reporte completo en SonarCloud](https://sonarcloud.io/project/overview?id=$PROJECT_KEY&branch=$BRANCH)" >> $GITHUB_STEP_SUMMARY
          
          # Tambi√©n mostrar en consola
          echo "=== SONARQUBE REPORT ==="
          echo "Bugs: $BUGS"
          echo "Vulnerabilities: $VULNERABILITIES"
          echo "Code Smells: $CODE_SMELLS"
          echo "Coverage: $COVERAGE%"
          echo "Duplication: $DUPLICATION%"
          echo "Quality Gate: $QUALITY_GATE"